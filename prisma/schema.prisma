// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Course {
  id          Int      @id @default(autoincrement())
  title       String   @unique
  description String?
  createdAt   DateTime @default(now())

  chapters Chapter[]
}

model Chapter {
  id       Int    @id @default(autoincrement())
  title    String
  order    Int // determines the order within the course
  courseId Int
  course   Course @relation(fields: [courseId], references: [id])

  lessons Lesson[]
}

model Lesson {
  id        Int     @id @default(autoincrement())
  title     String
  content   String?
  order     Int // determines the order within the chapter
  chapterId Int
  chapter   Chapter @relation(fields: [chapterId], references: [id])

  LessonAttempt LessonAttempt[]
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  createdAt DateTime @default(now())

  LessonAttempt LessonAttempt[]
  achievements  Achievement[]   @relation("UserAchievements")
}

model LessonAttempt {
  id          Int       @id @default(autoincrement())
  userId      Int
  lessonId    Int
  startedAt   DateTime  @default(now())
  completedAt DateTime?

  user   User   @relation(fields: [userId], references: [id])
  lesson Lesson @relation(fields: [lessonId], references: [id])

  @@index([userId, lessonId])
}

model Achievement {
  id          Int      @id @default(autoincrement())
  title       String   @unique
  description String
  criteria    Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  users User[] @relation("UserAchievements")
}
